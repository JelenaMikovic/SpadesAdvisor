package cep;

import com.ftn.sbnz.model.models.User;
import com.ftn.sbnz.model.models.Review;
import com.ftn.sbnz.model.models.Restaurant;
import com.ftn.sbnz.model.models.CuisineType;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

global List<Restaurant> recommendationList;
global List<Restaurant> allRestaurants;
global List<Restaurant> positiveReviewRecommendations;


declare Review
    @role(event)
end

rule "Detect multiple restaurant reviews within 7 days with same cuisine type"
salience 10
when
    $user : User()
    Number(intValue > 1) from accumulate(
        Review(user.getId() == $user.getId()) over window:time(7d), count()
    )
    $reviews : ArrayList() from collect(
        Review(user.getId() == $user.getId())
    )
    $cuisineMap : HashMap() from makeCuisineTypeMap($reviews)
then
    CuisineType $cuisineType = null;
    for (Object object : $cuisineMap.entrySet()) {
        Map.Entry<CuisineType, Integer> entry = (Map.Entry<CuisineType, Integer>) object;
        if (entry.getValue() > 1) {
            $cuisineType = entry.getKey();
            break;
        }
    }
    recommendationList.clear();
    if ($cuisineType != null) {
        for (Object object : allRestaurants) {
            Restaurant restaurant = (Restaurant) object;
            if (restaurant.getCuisineType().equals($cuisineType)) {
                System.out.println("Restaurant " + restaurant.getName() + " recommended to user " + $user.getFirstName());
                recommendationList.add(restaurant);
            }
        }
    }
end

function HashMap<CuisineType, Integer> makeCuisineTypeMap(ArrayList list) {
    HashMap<CuisineType, Integer> map = new HashMap<>();
    for(Object o : list) {
        Review review = (Review) o;
        Restaurant restaurant = review.getRestaurant();
        CuisineType cuisineType = restaurant.getCuisineType();
        Integer count = map.getOrDefault(cuisineType, 0);
        map.put(cuisineType, count + 1);
    }
    return map;
}


rule "Recommend restaurants based on recent positive reviews and preferred price"
salience 10
when
    // Dohvatanje korisnika
    $user : User()

    // Akumuliranje broja pozitivnih recenzija (ocena > 3) u poslednjih 48 sati
    Number(intValue > 0) from accumulate(
        Review(user.getId() == $user.getId() && rating > 3) over window:time(48h), count()
    )

    // Prikupljanje pozitivnih recenzija u poslednjih 48 sati
    $positiveReviews : List() from collect(
        Review(user.getId() == $user.getId() && rating > 3) over window:time(48h)
    )

    // Akumulacija prosečne cene restorana iz recenzija
    $averagePrice : Double() from accumulate(
        Review(restaurant: Restaurant, user.getId() == $user.getId() && rating > 3) over window:time(48h),
        average(restaurant.getPrice())
    )
then
    // Postavljanje preferiranog cenovnog opsega: prosek - 200 do prosek + 100
    double lowerBound = $averagePrice - 200;
    double upperBound = $averagePrice + 100;

    // Brisanje stare liste preporuka
    positiveReviewRecommendations.clear();

    // Preporuka svih restorana koji ispunjavaju uslove za cenu
    for (Object object : allRestaurants) {
        Restaurant restaurant = (Restaurant) object;
        // Proveri da li restoran nije već dodat na listu preporuka
        if (restaurant.getPrice() >= lowerBound && restaurant.getPrice() <= upperBound) {
            System.out.println("Restaurant " + restaurant.getName() + " (no reviews) recommended to user " + $user.getFirstName());
            positiveReviewRecommendations.add(restaurant);
        }
    }
end