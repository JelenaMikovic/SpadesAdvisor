package forward;

import com.ftn.sbnz.model.models.User;
import com.ftn.sbnz.model.models.Review;
import com.ftn.sbnz.model.models.Restaurant;
import com.ftn.sbnz.model.models.CuisineType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

global List<Restaurant> recommendedRestaurantsRating;
global Map<String, Integer> locationVisitCounts;
global List<Restaurant> recommendedRestaurantsLocation;

rule "Add restaurant to positively rated list"
when
    $review : Review(rating == 5)
    $user : User(this == $review.getUser())
    $restaurant : Restaurant(this == $review.getRestaurant())
    not (Restaurant(this == $restaurant) from $user.getPositivelyRatedRestaurants())
then
    $user.getPositivelyRatedRestaurants().add($restaurant);
    update($user);
    System.out.println("Restaurant " + $restaurant.getName() + " added to positively rated list of user " + $user.getFirstName());
end


rule "Add cuisine type to preferred list"
when
    $user : User(positivelyRatedRestaurants.size() > 0)
    $restaurant : Restaurant(this memberOf $user.getPositivelyRatedRestaurants())
then
    if (!$user.getPreferredCuisines().contains($restaurant.getCuisineType())) {
        $user.getPreferredCuisines().add($restaurant.getCuisineType());
        update($user);
        System.out.println("Cuisine type " + $restaurant.getCuisineType() + " added to preferred list of user " + $user.getFirstName());
    }
end

rule "Recommend restaurant based on preferred cuisines"
when
    $user : User(preferredCuisines.size() > 0)
    $restaurant : Restaurant(cuisineType memberOf $user.getPreferredCuisines(), this not memberOf $user.getPositivelyRatedRestaurants())
then
    if(!recommendedRestaurantsRating.contains($restaurant)){
        recommendedRestaurantsRating.add($restaurant);
        System.out.println("Restaurant " + $restaurant.getName() + " recommended to user " + $user.getFirstName());
    }
end

function String getPartOfCity(String location) {
    String[] locationParts = location.split(",");
    String partOfCity = locationParts[1].trim();
    return partOfCity;
}

rule "Add restaurant to visited list"
when
    $review : Review()
    $user : User(this == $review.getUser())
    $restaurant : Restaurant(this == $review.getRestaurant())
    not (Restaurant(this == $restaurant) from $user.getVisitedRestaurants())
then
    $user.getVisitedRestaurants().add($restaurant);
    update($user);
    String location = $restaurant.getLocation();
    String[] locationParts = location.split(",");
    String partOfCity = locationParts[1].trim();
    Integer count = (Integer) locationVisitCounts.getOrDefault(partOfCity, 0);
    locationVisitCounts.put(partOfCity, count + 1);
    System.out.println("Restaurant " + $restaurant.getName() + " added to visited list of user " + $user.getFirstName());
end

rule "Add location to preferred list"
when
    $user : User()
    $restaurant : Restaurant()
    $location : String() from getPartOfCity($restaurant.getLocation())
    $count : Integer() from locationVisitCounts.getOrDefault($location, 0)
    eval($count >= 3)
    not(String(this == $location) from $user.getPreferredLocations())
then
    if (!$user.getPreferredLocations().contains($location)) {
        $user.getPreferredLocations().add($location);
        update($user);
        System.out.println("Location " + $location + " added to preferred list of user " + $user.getFirstName());   
    }
end

rule "Recommend restaurant based on preferred locations"
when
    $user : User(preferredLocations.size() > 0)
    $restaurant : Restaurant($user.getPreferredLocations().contains(getPartOfCity($restaurant.getLocation())))
then
    if(!recommendedRestaurantsLocation.contains($restaurant)){
        recommendedRestaurantsLocation.add($restaurant);
        System.out.println("Restaurant " + $restaurant.getName() + " recommended to user " + $user.getFirstName());
    }
end

// DANILO FWD 2
rule "Add restaurant to price range list"
when
    $review : Review()
    $user : User(this == $review.getUser())
    $restaurant : Restaurant(this == $review.getRestaurant())
    $priceRange : String() from $restaurant.getPriceRange()
    not (String(this == $priceRange) from $user.getPreferredPriceRanges())
then
    // Add restaurant to the price range list
    List<Restaurant> restaurantList = priceRangeRestaurants.getOrDefault($priceRange, new ArrayList<>());
    restaurantList.add($restaurant);
    priceRangeRestaurants.put($priceRange, restaurantList);
    update($user);
    System.out.println("Restaurant " + $restaurant.getName() + " added to price range list of user " + $user.getFirstName());
end


rule "Add price range to preferred list"
when
    $user : User()
    $restaurant : Restaurant()
    $priceRange : String() from $restaurant.getPriceRange()
    not(String(this == $priceRange) from $user.getPreferredPriceRanges())
then
    // Add price range to the user's preferred price ranges
    if (!$user.getPreferredPriceRanges().contains($priceRange)) {
        $user.getPreferredPriceRanges().add($priceRange);
        update($user);
        System.out.println("Price range " + $priceRange + " added to preferred list of user " + $user.getFirstName());
    }
end


rule "Recommend restaurant based on preferred price ranges"
when
    $user : User(preferredPriceRanges.size() > 0)
    $restaurant : Restaurant(priceRange memberOf $user.getPreferredPriceRanges())
then
    if (!recommendedRestaurantsPrice.contains($restaurant)) {
        recommendedRestaurantsPrice.add($restaurant);
        System.out.println("Restaurant " + $restaurant.getName() + " recommended to user " + $user.getFirstName());
    }
end


// DANILO FWD 1
rule "Add restaurant to late closing list"
when
    $restaurant : Restaurant(openingHours.endTime after "22:00") // Assuming endTime is a string, adapt as needed
    $user : User()
    not (Restaurant(this == $restaurant) from $user.getLateClosingRestaurants())
then
    $user.getLateClosingRestaurants().add($restaurant);
    update($user);
    System.out.println("Restaurant " + $restaurant.getName() + " added to late closing list of user " + $user.getFirstName());
end

rule "Add closing time to preferred list"
when
    $user : User()
    $restaurant : Restaurant()
    $closingTime : String() from $restaurant.getOpeningHours().getEndTime() // Adapt getter method as needed
    not(String(this == $closingTime) from $user.getPreferredClosingTimes())
then
    if (!$user.getPreferredClosingTimes().contains($closingTime)) {
        $user.getPreferredClosingTimes().add($closingTime);
        update($user);
        System.out.println("Closing time " + $closingTime + " added to preferred list of user " + $user.getFirstName());
    }
end

rule "Recommend restaurant based on preferred closing times"
when
    $user : User(preferredClosingTimes.size() > 0)
    $restaurant : Restaurant(closingTime memberOf $user.getPreferredClosingTimes()) // Adapt getter method as needed
then
    if (!recommendedRestaurantsByClosingTime.contains($restaurant)) {
        recommendedRestaurantsByClosingTime.add($restaurant);
        System.out.println("Restaurant " + $restaurant.getName() + " recommended to user " + $user.getFirstName());
    }
end